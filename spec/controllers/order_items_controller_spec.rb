require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe OrderItemsController, type: :controller do
  let(:valid_attributes) { FactoryGirl.attributes_for(:order_item) }

  let(:invalid_attributes) { FactoryGirl.attributes_for(:order_item, quantity: "invalid") }

  let(:order_item) { FactoryGirl.create(:order_item)}

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # OrderItemsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all order_items as @order_items" do
      get :index, {}, session: valid_session
      expect(assigns(:order_items)).to eq([order_item])
    end
  end

  describe "GET #show" do
    it "assigns the requested order_item as @order_item" do
      get :show, id: order_item.to_param, session: valid_session
      expect(assigns(:order_item)).to eq(order_item)
    end
  end

  describe "GET #new" do
    it "assigns a new order_item as @order_item" do
      get :new, {}, session: valid_session
      expect(assigns(:order_item)).to be_a_new(OrderItem)
    end
  end

  describe "GET #edit" do
    it "assigns the requested order_item as @order_item" do
      get :edit, id: order_item.to_param, session: valid_session
      expect(assigns(:order_item)).to eq(order_item)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new OrderItem" do
        expect {
          post :create, order_item: valid_attributes, session: valid_session
        }.to change(OrderItem, :count).by(1)
      end

      it "assigns a newly created order_item as @order_item" do
        post :create, order_item: valid_attributes, session: valid_session
        expect(assigns(:order_item)).to be_a(OrderItem)
        expect(assigns(:order_item)).to be_persisted
      end

      it "redirects to the created order_item" do
        post :create, order_item: valid_attributes, session: valid_session
        expect(response).to redirect_to(OrderItem.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved order_item as @order_item" do
        post :create, order_item: invalid_attributes, session: valid_session
        expect(assigns(:order_item)).to be_a_new(OrderItem)
      end

      it "re-renders the 'new' template" do
        post :create, order_item: invalid_attributes, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) { FactoryGirl.attributes_for(:order_item, quantity: 42) }

      it "updates the requested order_item" do
        put :update, id: order_item.to_param, order_item: new_attributes, session: valid_session
        order_item.reload
        expect(order_item.quantity).to eq(new_attributes[:quantity])
      end

      it "assigns the requested order_item as @order_item" do
        put :update, id: order_item.to_param, order_item: valid_attributes, session: valid_session
        expect(assigns(:order_item)).to eq(order_item)
      end

      it "redirects to the order_item" do
        put :update, id: order_item.to_param, order_item: valid_attributes, session: valid_session
        expect(response).to redirect_to(order_item)
      end
    end

    context "with invalid params" do
      it "assigns the order_item as @order_item" do
        put :update, id: order_item.to_param, order_item: invalid_attributes, session: valid_session
        expect(assigns(:order_item)).to eq(order_item)
      end

      it "re-renders the 'edit' template" do
        put :update, id: order_item.to_param, order_item: invalid_attributes, session: valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    # create order item first so change in count can be measured
    let!(:order_item) { FactoryGirl.create(:order_item)}
    
    it "destroys the requested order_item" do
      expect {
        delete :destroy, id: order_item.to_param, session: valid_session
      }.to change(OrderItem, :count).by(-1)
      
    end

    it "redirects to the order_items list" do
      delete :destroy, id: order_item.to_param, session: valid_session
      expect(response).to redirect_to(order_items_url)
    end
  end

end
